# #!/usr/bin/env zunit

@test 'fzf binary' {
  run zinit \
    from='gh-r' \
    sbin'fzf' \
    for @junegunn/fzf

  assert $state equals 0
  assert "$output" contains "darwin"

  local fzf="$ZPFX/bin/fzf"
  assert "$fzf" is_file
  assert "$fzf" is_executable
}

@test 'bat binary' {
  run zinit \
    from='gh-r' \
    sbin'**/bat -> bat' \
    for @sharkdp/bat

  assert $state equals 0

  local bat="$ZPFX/bin/bat"
  assert "$bat" is_file
  assert "$bat" is_executable
}

@test 'delta binary' {
  run zinit \
    from'gh-r' \
    sbin'**/delta -> delta' \
    for @dandavison/delta

  assert $state equals 0

  local delta="$ZPFX/bin/delta"
  assert "$delta" is_file
  assert "$delta" is_executable
}

@test 'exa binary/completion' {
  run zinit \
    atclone'mv completions/exa.zsh _exa' \
    from'gh-r' \
    sbin'**/exa -> exa' \
    for ogham/exa

  assert $state equals 0

  local exa="$ZPFX/bin/exa"
  assert "$exa" is_file
  assert "$exa" is_executable

  # local exa_completion="$ZINIT[PLUGINS_DIR]"/ogham---exa/_exa
  # assert $exa_completion is_file
}

@test 'neovim binary' {
  run zinit \
    from'gh-r' \
    sbin'**/nvim' \
    ver'nightly' \
    for neovim/neovim

  assert $state equals 0

  local nvim="$ZPFX/bin/nvim"
  assert "$nvim" is_file
  assert "$nvim" is_executable
}

@test 'shfmt binary' {
  run zinit \
    from'gh-r' \
    sbin'**/sh* -> shfmt' \
    for @mvdan/sh

  assert $state equals 0

  local shfmt="$ZPFX/bin/shfmt"
  assert "$shfmt" is_file
  assert "$shfmt" is_executable
}

# vim: set ft=zsh et ts=2 sw=2 : #
